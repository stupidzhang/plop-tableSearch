<template>
  <div class="{{name}}">
    <div class="{{name}}_tools">
      <el-input
        v-model.trim="queryCondition.A"
        placeholder="请输入"
        clearable
        style="width: 250px; margin-right: 20px"
      ></el-input>
      <el-input
        v-model.trim="queryCondition.B"
        placeholder="请输入"
        clearable
        style="width: 250px; margin-right: 20px"
      ></el-input>
      <el-button type="primary" @click="queryByKeyWord">查询</el-button>
    </div>
    <el-button type="primary" @click="handleToEdit">新增</el-button>
    <div class="{{name}}_table">
      <el-table :data="{{name}}DataList" border style="margin-top: 20px">
        <el-table-column
          prop="id"
          label="接口号"
          min-width="80px"
        ></el-table-column>
        <el-table-column
          prop="{{name}}Name"
          label="接口名"
          min-width="150px"
        ></el-table-column>
        <el-table-column
          prop="updateTime"
          label="修改时间"
          min-width="100px"
        ></el-table-column>
        <el-table-column label="操作" min-width="100px" align="center">
          <template slot-scope="scope">
            <el-switch
              style="margin-right: 10px"
              v-model="scope.row.enabled"
              :active-value="1"
              :inactive-value="0"
              @click.native.prevent="handleChangeEnable(scope.row)"
            ></el-switch>
            <el-button
              type="text"
              @click.native.prevent="handleToEdit(scope.row)"
            >
              编辑
            </el-button>
            <el-button
              type="text"
              style="color: red"
              @click.native.prevent="deleteApi(scope.row.id)"
            >
              删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>
      <el-pagination
        @size-change="handleChangePageConfig"
        @current-change="handleChangePageConfig"
        :page-sizes="[10, 20, 50]"
        layout="total, sizes, prev, pager, next, jumper"
        :total="totalRecord"
      >
      </el-pagination>
    </div>
    <el-dialog
      :visible.sync="showAddDialog"
      :close-on-click-modal="false"
      :z-index="1001"
      @close="resetForm('ruleForm')"
      width="800px"
      title="接口配置"
      show-close
    >
      <el-form
        ref="ruleForm"
        :model="{{name}}Data"
        :rules="formRules"
        label-width="120px"
      >
        <el-form-item label="API号" prop="id">
          <el-input
            onkeyup="value=value.replace(/[^\x00-\xff]/g, '')"
            v-model.trim="{{name}}Data.id"
            :disabled="isEdit"
            placeholder="请填写API号"
          ></el-input>
        </el-form-item>
        <el-form-item label="API名称" prop="{{name}}Name">
          <el-input
            v-model.trim="{{name}}Data.{{name}}Name"
            placeholder="请填写API名称"
          ></el-input>
        </el-form-item>
        <el-form-item label="服务请求方法" prop="serviceRequestMethod">
          <el-select
            v-model="{{name}}Data.serviceRequestMethod"
            placeholder="请选择服务请求方法"
          >
            <el-option label="GET" value="GET"></el-option>
            <el-option label="POST" value="POST"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="服务请求地址" prop="serviceRequestPath">
          <el-input
            v-model.trim="{{name}}Data.serviceRequestPath"
            placeholder="请填写服务请求地址"
          ></el-input>
        </el-form-item>
        <el-form-item label="接口描述" prop="description">
          <el-input
            v-model.trim="{{name}}Data.description"
            type="textarea"
            placeholder="请输入接口描述"
          >
          </el-input>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="handleToSaveConfig('ruleForm')">确 定</el-button>
        <el-button @click="resetForm('ruleForm')">取 消</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
  export default {
    name:"{{name}}",
  components: {  }, 
  data() { 
    return { 
      queryCondition: { A: '', B: '',
  }, 
  {{name}}DataList: [], 
  totalRecord: 0, 
  showAddDialog: false, 
  {{name}}Data: { 
    id: '',
  {{name}}Name: '', 
  description: '', 
  crate: true, }, 
  isEdit: false, 
  formRules: { id: [ { required: true, message: '请输入api号', trigger: 'blur',
  }, ], {{name}}Name: [ { required: true, message: '请输入接口名', trigger: 'blur',
  }, ],  description:
  [ { required: true, message: '请输入接口描述', trigger: 'blur', }, ], }, }; },

  mounted() { this.querySourceData(); },
   methods: { 
     querySourceData() {
       this.$api['']({ params: this.queryCondition, }).then((res) => { 
         if (res.code === '000000') {
            this.{{name}}DataList = res.data.records; 
            this.totalRecord =res.data.total; 
            } else { 
              this.$notify.error(res.message); 
            } }); 
            },
  queryByKeyWord() { 
    this.queryCondition.pageNum = 1; this.querySourceData(); 
    },
  handleChangePageConfig(pageNum, pageSize) { 
    this.queryCondition.pageNum =pageNum; 
    this.queryCondition.pageSize = pageSize; 
    this.querySourceData(); 
    },
  handleToEdit(row = {}) { 
    this.showAddDialog = true; 
    this.$nextTick(() => { 
      if(row.id) { 
      this.isEdit = true; 
      this.{{name}}Data = JSON.parse(JSON.stringify(row));
  } else { 
    this.isEdit = false; 
    }
     this.{{name}}Data.crate = !this.isEdit; 
     }); },
  handleChangeEnable(row) { 
    this.$confirm('此操作将启用/禁用接口，是否继续?',
  '提示', { confirmButtonText: '确定', cancelButtonText: '取消', type:
  'warning', }) .then(() => { 
    this.$api['']({
  params: {  }, 
  }).then((res) => { if(res.code === '000000') {
     this.querySourceData(); 
     } else {
  this.$notify.error(res.message);
   } }); }) .catch(() => {
  this.querySourceData(); 
  }); }, 
  deleteApi(id) {
  this.$confirm('此操作将删除接口，是否继续?', '提示', {
     confirmButtonText:
  '确定', cancelButtonText: '取消', type: 'warning', 
  }) .then(() => {
  this.$api['']({ 
    params: { id, deleted: true },
  }).then((res) => { 
    if (res.code === '000000') { 
      this.querySourceData();
  this.$notify.success('删除成功'); 
  } }); }) .catch(() => {}); },
  handleToSaveConfig(form) { 
    this.$refs[form].validate((valid) => { if (valid) {
  this.$api['']({ data: this.{{name}}Data, }).then((res) => {
  if (res.code === '000000') { 
    this.$notify.success('保存成功');
  this.resetForm(form); 
  this.querySourceData(); } else {
  this.$notify.error(res.message); 
  } }); 
  } }); 
  }, 
  resetForm(form) {
  this.$refs[form].resetFields();
   this.showAddDialog = false; 
   }, 
   }, 
   };
</script>

<style lang="less" scoped>
  .{{name}} { height: 100%; 
  overflow: auto; 
  &_tools { padding: 20px; } 
  &_table
  { padding: 0 20px 20px; } }
</style>